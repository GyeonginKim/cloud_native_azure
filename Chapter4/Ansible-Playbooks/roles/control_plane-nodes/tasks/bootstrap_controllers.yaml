---
  - name: Copy Keys 
    copy:
      src: "{{ item }}"
      dest: /var/lib/kubernetes/
    become: yes
    with_items: 
      - ca.pem
      - ca-key.pem
      - kubernetes-key.pem 
      - kubernetes.pem
      - service-account-key.pem
      - service-account.pem
      - encryption-config.yaml

  - name: Copy encryption configs 
    template:
      src: encryption-config.yaml.j2
      dest: /var/lib/kubernetes/encryption-config.yaml


  - name: Configure Service file for controller 0
    template:
      src: kube-apiserver.service.j2
      dest: /etc/systemd/system/kube-apiserver.service
    when: ansible_hostname == "controller0"

  - name: Configure Service file for controller 1
    template:
      src: kube-apiserver.service.j2
      dest: /etc/systemd/system/kube-apiserver.service
    when: ansible_hostname == "controller1"

  - name: Configure Service file for controller 2
    template:
      src: kube-apiserver.service.j2
      dest: /etc/systemd/system/kube-apiserver.service
    when: ansible_hostname == "controller2"

  - name: Copy kube-controller-manager.kubeconfig to all controllers
    copy: 
      src: kube-controller-manager.kubeconfig
      dest: /var/lib/kubernetes/

  - name: Copy the systemd service filr for kube-controller-manager
    template: 
      src: kube-controller-manager.service.j2
      dest: kube-controller-manager.service

  - name: Copy kube-scheduler kubeconfig 
    copy:
      src: kube-scheduler.kubeconfig
      dest: /var/lib/kubernetes/

  - name: Copy kube-scheduler.yaml configuration file
    copy: 
      src: kube-scheduler.yaml
      dest: /etc/kubernetes/config/kube-scheduler.yaml

  - name: Copy kube-scheduler.service systemd unit file
    copy: 
      src: kube-scheduler.service
      dest: /etc/systemd/system/kube-scheduler.service

  - name: Start Controllers - kube-apiserver
    systemd:
      state: started
      daemon_reload: yes
      name: kube-apiserver
      enabled: yes

  - name: Start Controllers - kube-controller-manager
    systemd:
      state: started
      daemon_reload: yes
      name: kube-controller-manager
      enabled: yes

  - name: Start Controllers - kube-scheduler
    systemd:
      state: started
      daemon_reload: yes
      name: kube-scheduler
      enabled: yes

  - name: Pause for 15 sec 
    pause:
      seconds: 15

  - name: Check get components
    shell: kubectl get componentstatuses
    register: componentstatuses

  - name: Show Component Status 
    debug: 
      var: componentstatuses.stdout_lines

  - name: Configure RBAC for kubelet auth on controller0
    shell: |
      kubectl apply -f -
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        annotations:
          rbac.authorization.kubernetes.io/autoupdate: "true"
      labels:
        kubernetes.io/bootstrapping: rbac-defaults
      name: system:kube-apiserver-to-kubelet
      rules:
        - apiGroups:
          - ""
        resources:
          - nodes/proxy
          - nodes/stats
          - nodes/log
          - nodes/spec
          - nodes/metrics
        verbs:
          - "*"
    when: ansible_hostname == "controller0"

  - name: Bind ClusterRole to kubernetes user
    shell: |
      kubectl apply -f -
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: system:kube-apiserver
        namespace: ""
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: system:kube-apiserver-to-kubelet
      subjects:
        - apiGroup: rbac.authorization.k8s.io
          kind: User
          name: kubernetes


